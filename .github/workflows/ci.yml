name: CI/CD
on:
  push:
  pull_request:
    types: [opened, synchronize]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Go Configuration
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Checkout code
        uses: actions/checkout@v1

      - name: Build
        run: make

      - name: Golang Test
        run: make native-test

      - name: Helm Test
        env:
          HELM_VERSION: v3.0.3
          CT_VERSION: 3.0.0-beta.1
          CHART_DIRECTORY: "./charts/quay-operator"
        run: |
          sudo apt-get -y install yamllint
          wget https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
          tar zxf helm-${HELM_VERSION}-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin
          rm -rf linux-amd64
          pip install wheel
          sudo pip install yamale
          wget https://github.com/helm/chart-testing/releases/download/v${CT_VERSION}/chart-testing_${CT_VERSION}_linux_amd64.tar.gz
          tar zxf chart-testing_${CT_VERSION}_linux_amd64.tar.gz
          mkdir $HOME/.ct
          mv etc/* $HOME/.ct/
          sudo mv ct /usr/local/bin/
          helm template ${CHART_DIRECTORY} > quay-operator-yamllint.yml
          yamllint quay-operator-yamllint.yml
          ct lint

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

  latest-image:
    name: Build Latest Image
    runs-on: ubuntu-latest
    if: "github.repository == 'redhat-cop/quay-operator' && !startsWith(github.ref, 'refs/tags') && github.ref == 'refs/heads/master' && github.event_name != 'pull_request'"
    needs: ["build"]
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

      - name: Update Operator Binary Permissions
        run: chmod 775 build/_output/bin/quay-operator

      - name: Build and Publish Latest Image
        env:
          DOCKER_USER: ${{ secrets.DockerUser }}
          DOCKER_PASSWORD: ${{ secrets.DockerPassword }}
          REPOSITORY: ${{ secrets.Repository }}
        run: "make ci-latest-deploy"

  release:
    name: Build Release Image
    runs-on: ubuntu-latest
    if: "github.repository == 'redhat-cop/quay-operator' && startsWith(github.ref, 'refs/tags') && github.event_name != 'pull_request'"
    needs: ["build"]
    steps:
      - name: Check Out Code
        uses: actions/checkout@v1

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

      - name: Update Operator Binary Permissions
        run: chmod 775 build/_output/bin/quay-operator

      - name: Build and Publish Release Image
        env:
          DOCKER_USER: ${{ secrets.DockerUser }}
          DOCKER_PASSWORD: ${{ secrets.DockerPassword }}
          REPOSITORY: ${{ secrets.Repository }}
        run: "make ci-release-deploy"

  pull-request:
    name: Build PR Image
    runs-on: ubuntu-latest
    if: "github.repository == 'redhat-cop/quay-operator' && github.event_name == 'pull_request'"
    needs: ["build"]
    steps:
      - name: Check Out Code
        uses: actions/checkout@v1

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

      - name: Update Operator Binary Permissions
        run: chmod 775 build/_output/bin/quay-operator

      - name: Build and Publish PR Image
        env:
          DOCKER_USER: ${{ secrets.DockerUser }}
          DOCKER_PASSWORD: ${{ secrets.DockerPassword }}
          REPOSITORY: ${{ secrets.Repository }}
        run: |
          make ci-custom-tag-deploy CUSTOM_TAG=PR-$(echo "$GITHUB_REF" | awk -F / '{print $3}')

      - name: Set Output Variables
        if: github.event.action == 'opened'
        env:
          REPOSITORY: ${{ secrets.Repository }}
        run: |
          echo "::set-output name=pr_image::${REPOSITORY}:PR-$(echo "$GITHUB_REF" | awk -F / '{print $3}')"
          echo "::set-output name=pr_tags::https://quay.io/repository/$(echo ${REPOSITORY} | cut -d'/' -f2-3)?tab=tags"
        id: pr_image_references
      - name: Comment on PR
        if: github.event.action == 'opened'
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Pull Request Image: [${{ steps.pr_image_references.outputs.pr_image }}](${{ steps.pr_image_references.outputs.pr_tags }})
