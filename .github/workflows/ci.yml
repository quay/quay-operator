name: CI/CD
on: [push, pull_request]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Go Configuration
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Checkout code
        uses: actions/checkout@v1

      - name: Build
        run: make

      - name: Golang Test
        run: make native-test

      - name: Helm Test
        id: lint
        uses: helm/chart-testing-action@v1.0.0-rc.2
        with:
          command: lint
          config: ct.yaml

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

  latest-image:
    name: Build Latest Image
    runs-on: ubuntu-latest
    if: "github.repository == 'redhat-cop/quay-operator' && !startsWith(github.ref, 'refs/tags') && github.ref == 'refs/heads/master'"
    needs: ["build"]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

      - name: Update Operator Binary Permissions
        run: chmod 775 build/_output/bin/quay-operator

      - name: Build and Publish Latest Image
        env:
          DOCKER_USER: ${{ secrets.DockerUser }}
          DOCKER_PASSWORD: ${{ secrets.DockerPassword }}
          REPOSITORY: ${{ secrets.Repository }}
        run: "make ci-latest-deploy"

  release-image:
    name: Build Release Image
    runs-on: ubuntu-latest
    if: "github.repository == 'redhat-cop/quay-operator' && startsWith(github.ref, 'refs/tags')"
    needs: ["build"]
    steps:
      - name: Check Out Code
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

      - name: Update Operator Binary Permissions
        run: chmod 775 build/_output/bin/quay-operator

      - name: Build and Publish Release Image
        env:
          DOCKER_USER: ${{ secrets.DockerUser }}
          DOCKER_PASSWORD: ${{ secrets.DockerPassword }}
          REPOSITORY: ${{ secrets.Repository }}
        run: "make ci-release-deploy"

  release-github:
    name: GitHub Release
    runs-on: ubuntu-latest
    if: "github.repository == 'redhat-cop/quay-operator' && startsWith(github.ref, 'refs/tags')"
    needs: ["release-image"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: |
          git fetch --prune --unshallow
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: quay-operator
          path: build/_output/bin

      - name: Compress Archive
        run: |
          tar -czf build/_output/bin/quay-operator-${{ steps.get_version.outputs.VERSION }}.tar.gz build/_output/bin/quay-operator
      - name: Generate Changelog
        run: |
          LATEST_TAG=$(git tag --sort=creatordate | sed '$!d')
          PREVIOUS_TAG=$(git tag --sort=creatordate | sed 'x;$!d')
          if [ -z "${PREVIOUS_TAG}" ]; then
            REV_RANGE=${LATEST_TAG}
          else
            REV_RANGE=${PREVIOUS_TAG}..${LATEST_TAG}
          fi
          git log --pretty=format:"- %s %H (%aN)" --no-merges ${REV_RANGE} > ${{ steps.get_version.outputs.VERSION }}-CHANGELOG.txt
          cat ${{ steps.get_version.outputs.VERSION }}-CHANGELOG.txt
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ steps.get_version.outputs.VERSION }}-CHANGELOG.txt
          draft: false
          prerelease: false
          files: |
            build/_output/bin/quay-operator-${{ steps.get_version.outputs.VERSION }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
